<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>Codefest Website</title>
  <style>
    /* General Styles */
    body {
      font-family: Georgia;
      background-color: LightCyan;
      padding: 20px;
      text-align: center;
    }

    section {
      margin: 40px 0;
      padding: 25px;
      border: 5px solid #ccc;
      background-color: black;
      border-radius: 15px;
    }

    h1 {
      font-size: 30px;
      color: WhiteSmoke;
    }

    /* Button Styles */
    button {
      padding: 15px 25px;
      margin: 10px;
      font-size: 20px;
      cursor: pointer;
      background-color: #4CAF50;
      color: white;
      border: none;
      border-radius: 10px;
    }

    button:hover {
      background-color: #45a049;
    }

    /* Translator Section Styles */
    .container {
      background-color: black;
      padding: 20px;
      border-radius: 10px;
      box-shadow: 0 4px 8px rgba(0, 0, 0, 0.1);
      text-align: center;
      width: 350px;
      margin: 0 auto;
    }

    textarea {
      width: 100%;
      height: 100px;
      padding: 10px;
      margin: 10px 0;
      border: 1px solid #ddd;
      border-radius: 5px;
      font-size: 16px;
      resize: none;
    }

    select {
      padding: 10px;
      margin: 10px 0;
      border-radius: 5px;
      font-size: 16px;
    }

    /* Calculator Styles */
    #calc-display {
      padding: 10px;
      font-size: 24px;
      width: 250px;
      margin: 20px;
      text-align: left;
    }

    .buttons {
      display: grid;
      grid-template-columns: repeat(4, 1fr);
      grid-gap: 10px;
      justify-content: center;
      max-width: 300px;
      margin: 0 auto;
    }

    .buttons button {
      font-size: 20px;
      padding: 20px;
    }

    /* Ping Pong Game Styles */
    #ping-pong-canvas {
      border: 2px solid #000;
      display: block;
      margin: 0 auto;
    }

    #ping-pong-info {
      margin-top: 10px;
    }
  </style>
</head>
<body>

  <!-- Translator Section -->
  <section id="translator">
    <div class="container">
      <h1>Language Translator</h1>
      <select id="from-lang">
        <option value="en">English</option>
        <option value="es">Spanish</option>
        <option value="zh">Mandarin</option>
        <option value="fr">French</option>
        <option value="ar">Arabic</option>
        <option value="hi">Hindi</option>
      </select>

      <textarea id="from-text" placeholder="Enter text"></textarea>

      <button onclick="translateText()">Translate</button>

      <textarea id="to-text" readonly placeholder="Translation"></textarea>

      <select id="to-lang">
        <option value="en">English</option>
        <option value="es">Spanish</option>
        <option value="zh">Mandarin</option>
        <option value="fr">French</option>
        <option value="ar">Arabic</option>
        <option value="hi">Hindi</option>
      </select>
    </div>
  </section>

  <!-- Calculator Section --> 
  <section id="calculator">
    <h1>Calculator</h1>
    <input type="text" id="calc-display">
    <div class="buttons">
      <button onclick="appendToDisplay('7')">7</button>
      <button onclick="appendToDisplay('8')">8</button>
      <button onclick="appendToDisplay('9')">9</button>
      <button onclick="appendToDisplay('*')">*</button>
      <button onclick="appendToDisplay('4')">4</button>
      <button onclick="appendToDisplay('5')">5</button>
      <button onclick="appendToDisplay('6')">6</button>
      <button onclick="appendToDisplay('-')">-</button>
      <button onclick="appendToDisplay('1')">1</button>
      <button onclick="appendToDisplay('2')">2</button>
      <button onclick="appendToDisplay('3')">3</button>
      <button onclick="appendToDisplay('+')">+</button>
      <button onclick="clearDisplay()">C</button>
      <button onclick="appendToDisplay('0')">0</button>
      <button onclick="appendToDisplay('.')">.</button>
      <button onclick="calculate()">=</button>
      <button onclick="appendToDisplay('/')">รท</button>
    </div>
  </section>

  <!-- Ping Pong Game Section -->
  <section id="ping-pong-game">
    <h1>Ping Pong Game (30 seconds)</h1>
    <canvas id="gameCanvas"></canvas>
    <div id="score">Score: 0 | High Score: 0</div>
    <div id="timer">Time: 30s</div>
    <div id="game-over">
      <h1>Game Over!</h1>
      <button onclick="restartGame()">Restart</button>
    </div>
  </section>

  <script>
    // Translator Functionality
    function translateText() {
      const fromLang = document.getElementById('from-lang').value;
      const toLang = document.getElementById('to-lang').value;
      const text = document.getElementById('from-text').value;

      if (text.trim() === '') {
        alert("Please enter some text to translate.");
        return;
      }

      const apiUrl = `https://api.mymemory.translated.net/get?q=${encodeURIComponent(text)}&langpair=${fromLang}|${toLang}`;
      fetch(apiUrl)
        .then(response => response.json())
        .then(data => {
          document.getElementById('to-text').value = data.responseData.translatedText;
        })
        .catch(error => {
          console.error("Error translating text:", error);
          alert("Something went wrong, please try again later.");
        });
    }

    // Calculator Functionality
    function appendToDisplay(value) {
      const display = document.getElementById("calc-display");
      display.value += value;
    }

    function clearDisplay() {
      const display = document.getElementById("calc-display");
      display.value = "";
    }

    function calculate() {
      const display = document.getElementById("calc-display");
      try {
        display.value = eval(display.value);
      } catch (error) {
        display.value = "Error";
      }
    }

    // Ping Pong Game Functionality
    const canvas = document.getElementById("gameCanvas");
    const ctx = canvas.getContext("2d");
    const scoreDisplay = document.getElementById("score");
    const timerDisplay = document.getElementById("timer");
    const gameOverDisplay = document.getElementById("game-over");

    canvas.width = window.innerWidth * 0.8;
    canvas.height = 400;

    let paddle = {
      x: canvas.width / 2 - 50,
      y: canvas.height - 30,
      width: 100,
      height: 10,
      dx: 8
    };

    let ball = {
      x: canvas.width / 2,
      y: canvas.height / 2,
      radius: 10,
      dx: 4,
      dy: -4
    };

    let score = 0;
    let highScore = 0;
    let startTime = Date.now();
    let timer = 30;
    let gameRunning = true;

    let keys = {};
    window.addEventListener("keydown", (e) => (keys[e.key] = true));
    window.addEventListener("keyup", (e) => (keys[e.key] = false));

    function drawPaddle() {
      ctx.fillStyle = "white";
      ctx.fillRect(paddle.x, paddle.y, paddle.width, paddle.height);
    }

    function drawBall() {
      ctx.beginPath();
      ctx.arc(ball.x, ball.y, ball.radius, 0, Math.PI * 2);
      ctx.fillStyle = "cyan";
      ctx.fill();
      ctx.closePath();
    }

    function updatePaddle() {
      if (keys["ArrowLeft"] && paddle.x > 0) {
        paddle.x -= paddle.dx;
      }
      if (keys["ArrowRight"] && paddle.x < canvas.width - paddle.width) {
        paddle.x += paddle.dx;
      }
    }

    function updateBall() {
      ball.x += ball.dx;
      ball.y += ball.dy;

      if (ball.x - ball.radius <= 0 || ball.x + ball.radius >= canvas.width) {
        ball.dx *= -1;
      }
      if (ball.y - ball.radius <= 0) {
        ball.dy *= -1;
      }

      if (ball.y + ball.radius >= paddle.y && ball.x >= paddle.x && ball.x <= paddle.x + paddle.width) {
        ball.dy *= -1;
        score++;
      }

      if (ball.y + ball.radius > canvas.height) {
        gameRunning = false;
      }
    }

    function drawScore() {
      scoreDisplay.textContent = `Score: ${score} | High Score: ${highScore}`;
    }

    function updateTimer() {
      const elapsed = Math.floor((Date.now() - startTime) / 1000);
      timer = Math.max(0, 30 - elapsed);
      timerDisplay.textContent = `Time: ${timer}s`;
      if (timer === 0) {
        gameRunning = false;
      }
    }

    function restartGame() {
      score = 0;
      startTime = Date.now();
      timer = 30;
      ball.x = canvas.width / 2;
      ball.y = canvas.height / 2;
      ball.dx = 4;
      ball.dy = -4;
      gameRunning = true;
      gameOverDisplay.style.display = "none";
      requestAnimationFrame(gameLoop);
    }

    function gameLoop() {
      if (!gameRunning) {
        gameOverDisplay.style.display = "block";
        highScore = Math.max(highScore, score);
        return;
      }

      ctx.clearRect(0, 0, canvas.width, canvas.height);

      drawPaddle();
      drawBall();
      drawScore();
      updatePaddle();
      updateBall();
      updateTimer();

      requestAnimationFrame(gameLoop);
    }

    gameLoop();
  </script>

</body>
</html>
